definitions:
  request.ReqRecommendFood:
    properties:
      flavor:
        example: 매운맛
        type: string
      previousAnswer:
        example: 김치찌개 떡볶이 치킨
        type: string
      scenario:
        example: 혼밥
        type: string
      theme:
        example: 스트레스 해소
        type: string
      time:
        example: 점심
        type: string
      type:
        example: 한식
        type: string
    type: object
  request.ReqReissue:
    properties:
      accessToken:
        type: string
      refreshToken:
        type: string
    type: object
  request.ReqRequestPassword:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  request.ReqSelectFood:
    properties:
      flavor:
        example: 매운맛
        type: string
      name:
        example: 김치찌개
        type: string
      scenario:
        description: 전체 , 혼밥, 가족, 친구들
        example: 혼밥
        type: string
      theme:
        example: 기분 전환
        type: string
      time:
        example: 점심
        type: string
      type:
        description: 전체, 양식, 한식, 중식 등
        example: 한식
        type: string
    type: object
  request.ReqSignin:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  request.ReqSignup:
    properties:
      birth:
        example: "1990-01-01"
        type: string
      email:
        type: string
      name:
        example: 홍길동
        type: string
      password:
        example: 6글자 이상
        minLength: 6
        type: string
      sex:
        enum:
        - male
        - female
        example: male / female
        type: string
    required:
    - birth
    - email
    - name
    - password
    - sex
    type: object
  request.ReqUpdateUser:
    properties:
      birth:
        type: string
      name:
        type: string
      sex:
        type: string
    required:
    - birth
    - name
    - sex
    type: object
  request.ReqV02GoogleOauth:
    properties:
      token:
        type: string
    type: object
  request.ReqValidatePassword:
    properties:
      code:
        type: string
      email:
        type: string
      password:
        type: string
    type: object
  response.Category:
    properties:
      image:
        type: string
      name:
        type: string
    type: object
  response.DailyRecommendFood:
    properties:
      image:
        type: string
      name:
        type: string
    type: object
  response.EmptyFood:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  response.GoogleOauthCallbackRes:
    properties:
      accessToken:
        type: string
      refreshToken:
        type: string
    type: object
  response.HistoryFood:
    properties:
      created:
        type: string
      name:
        type: string
      scenario:
        type: string
      time:
        type: string
      type:
        type: string
    type: object
  response.MetaData:
    properties:
      flavors:
        items:
          $ref: '#/definitions/response.Category'
        type: array
      scenarios:
        items:
          $ref: '#/definitions/response.Category'
        type: array
      themes:
        items:
          $ref: '#/definitions/response.Category'
        type: array
      times:
        items:
          $ref: '#/definitions/response.Category'
        type: array
      types:
        items:
          $ref: '#/definitions/response.Category'
        type: array
    type: object
  response.RankFood:
    properties:
      name:
        type: string
      rank:
        type: integer
      rankChange:
        type: string
    type: object
  response.RecommendFood:
    properties:
      image:
        type: string
      name:
        type: string
    type: object
  response.ResDailyRecommendFood:
    properties:
      dilayFoods:
        items:
          $ref: '#/definitions/response.DailyRecommendFood'
        type: array
    type: object
  response.ResEmptyImageFood:
    properties:
      foods:
        items:
          $ref: '#/definitions/response.EmptyFood'
        type: array
    type: object
  response.ResGetUser:
    properties:
      birth:
        type: string
      email:
        type: string
      name:
        type: string
      sex:
        type: string
    type: object
  response.ResGuest:
    properties:
      accessToken:
        type: string
      refreshToken:
        type: string
    type: object
  response.ResHistoryFood:
    properties:
      foods:
        items:
          $ref: '#/definitions/response.HistoryFood'
        type: array
    type: object
  response.ResMetaData:
    properties:
      metaData:
        $ref: '#/definitions/response.MetaData'
    type: object
  response.ResRankingFood:
    properties:
      foods:
        items:
          $ref: '#/definitions/response.RankFood'
        type: array
    type: object
  response.ResRecommendFood:
    properties:
      foodNames:
        items:
          $ref: '#/definitions/response.RecommendFood'
        type: array
    type: object
  response.ResReissue:
    properties:
      accessToken:
        type: string
      refreshToken:
        type: string
    type: object
  response.ResSelectFood:
    properties:
      foodCompatibility:
        type: string
    type: object
  response.ResSignin:
    properties:
      accessToken:
        type: string
      refreshToken:
        type: string
      userID:
        type: integer
    type: object
  response.ResSignup:
    properties:
      accessToken:
        type: string
      refreshToken:
        type: string
    type: object
  response.ResV02GoogleOauth:
    properties:
      accessToken:
        type: string
      refreshToken:
        type: string
      userID:
        type: integer
    type: object
  response.ResV02GoogleOauthCallback:
    properties:
      accessToken:
        type: string
      refreshToken:
        type: string
      userID:
        type: integer
    type: object
info:
  contact: {}
paths:
  /v0.1/auth/email/check:
    get:
      description: |-
        ■ errCode with 400
        PARAM_BAD : 파라미터 오류
        USER_ALREADY_EXISTED : 유저가 이미 존재

        ■ errCode with 500
        INTERNAL_SERVER : 내부 로직 처리 실패
        INTERNAL_DB : DB 처리 실패
        PLAYER_STATE_CHANGE_FAILED : 플레이어 상태 변경 실패
      parameters:
      - description: email
        in: query
        name: email
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: boolean
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: 이메일 중복 체크
      tags:
      - auth
  /v0.1/auth/google:
    get:
      description: |-
        ■ errCode with 400
        PARAM_BAD : 파라미터 오류
        USER_NOT_EXIST : 유저가 존재하지 않음
        USER_ALREADY_EXISTED : 유저가 이미 존재

        ■ errCode with 500
        INTERNAL_SERVER : 내부 로직 처리 실패
        INTERNAL_DB : DB 처리 실패
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: boolean
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: google oauth 로그인
      tags:
      - auth
  /v0.1/auth/google/callback:
    get:
      description: |-
        ■ errCode with 400
        PARAM_BAD : 파라미터 오류
        USER_NOT_EXIST : 유저가 존재하지 않음
        USER_ALREADY_EXISTED : 유저가 이미 존재

        ■ errCode with 500
        INTERNAL_SERVER : 내부 로직 처리 실패
        INTERNAL_DB : DB 처리 실패
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.GoogleOauthCallbackRes'
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: google oauth 로그인 콜백
      tags:
      - auth
  /v0.1/auth/guest:
    post:
      description: |-
        ■ errCode with 400
        PARAM_BAD : 파라미터 오류
        USER_NOT_EXIST : 유저가 존재하지 않음
        USER_ALREADY_EXISTED : 유저가 이미 존재

        ■ errCode with 500
        INTERNAL_SERVER : 내부 로직 처리 실패
        INTERNAL_DB : DB 처리 실패
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResGuest'
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: 게스트 로그인
      tags:
      - auth
  /v0.1/auth/logout:
    post:
      description: |-
        ■ errCode with 400
        PARAM_BAD : 파라미터 오류
        USER_NOT_EXIST : 유저가 존재하지 않음
        USER_ALREADY_EXISTED : 유저가 이미 존재

        ■ errCode with 500
        INTERNAL_SERVER : 내부 로직 처리 실패
        INTERNAL_DB : DB 처리 실패
        PLAYER_STATE_CHANGE_FAILED : 플레이어 상태 변경 실패
      parameters:
      - description: accessToken
        in: header
        name: tkn
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: boolean
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: 로그아웃 하기
      tags:
      - auth
  /v0.1/auth/password/request:
    post:
      description: |-
        ■ errCode with 400
        PARAM_BAD : 파라미터 오류
        USER_NOT_EXIST : 유저가 존재하지 않음
        USER_ALREADY_EXISTED : 유저가 이미 존재

        ■ errCode with 500
        INTERNAL_SERVER : 내부 로직 처리 실패
        INTERNAL_DB : DB 처리 실패
      parameters:
      - description: email
        in: body
        name: json
        required: true
        schema:
          $ref: '#/definitions/request.ReqRequestPassword'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: 비밀번호 변경 요청
      tags:
      - auth
  /v0.1/auth/password/validate:
    post:
      description: |-
        ■ errCode with 400
        PARAM_BAD : 파라미터 오류
        USER_NOT_EXIST : 유저가 존재하지 않음
        USER_ALREADY_EXISTED : 유저가 이미 존재

        ■ errCode with 500
        INTERNAL_SERVER : 내부 로직 처리 실패
        INTERNAL_DB : DB 처리 실패
      parameters:
      - description: email, password, code
        in: body
        name: json
        required: true
        schema:
          $ref: '#/definitions/request.ReqValidatePassword'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: boolean
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: 비밀번호 변경 검증
      tags:
      - auth
  /v0.1/auth/signin:
    post:
      description: |-
        ■ errCode with 400
        PARAM_BAD : 파라미터 오류
        USER_NOT_EXIST : 유저가 존재하지 않음
        USER_ALREADY_EXISTED : 유저가 이미 존재

        ■ errCode with 500
        INTERNAL_SERVER : 내부 로직 처리 실패
        INTERNAL_DB : DB 처리 실패
      parameters:
      - description: 이메일, 비밀번호
        in: body
        name: json
        required: true
        schema:
          $ref: '#/definitions/request.ReqSignin'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResSignin'
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: 로그인
      tags:
      - auth
  /v0.1/auth/signup:
    post:
      description: |-
        ■ errCode with 400
        PARAM_BAD : 파라미터 오류
        USER_NOT_EXIST : 유저가 존재하지 않음
        USER_ALREADY_EXISTED : 유저가 이미 존재

        ■ errCode with 500
        INTERNAL_SERVER : 내부 로직 처리 실패
        INTERNAL_DB : DB 처리 실패
      parameters:
      - description: 이름, 이메일, 비밀번호
        in: body
        name: json
        required: true
        schema:
          $ref: '#/definitions/request.ReqSignup'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResSignup'
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: 회원 가입
      tags:
      - auth
  /v0.1/auth/token/reissue:
    put:
      description: |-
        ■ errCode with 400
        PARAM_BAD : 파라미터 오류
        USER_NOT_EXIST : 유저가 존재하지 않음
        USER_ALREADY_EXISTED : 유저가 이미 존재

        ■ errCode with 500
        INTERNAL_SERVER : 내부 로직 처리 실패
        INTERNAL_DB : DB 처리 실패
      parameters:
      - description: 액세스 토큰, 리프레시 토큰
        in: body
        name: json
        required: true
        schema:
          $ref: '#/definitions/request.ReqReissue'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResReissue'
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: 액세스 토큰 재발급
      tags:
      - auth
  /v0.1/foods/daily-recommend:
    get:
      description: |-
        ■ errCode with 400
        PARAM_BAD : 파라미터 오류
        USER_NOT_EXIST : 유저가 존재하지 않음
        USER_ALREADY_EXISTED : 유저가 이미 존재

        ■ errCode with 500
        INTERNAL_SERVER : 내부 로직 처리 실패
        INTERNAL_DB : DB 처리 실패
        PLAYER_STATE_CHANGE_FAILED : 플레이어 상태 변경 실패
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResDailyRecommendFood'
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: 오늘의 음식 추천 받기 (3개))
      tags:
      - food
  /v0.1/foods/empty-image:
    get:
      description: |-
        ■ errCode with 400
        PARAM_BAD : 파라미터 오류
        USER_NOT_EXIST : 유저가 존재하지 않음
        USER_ALREADY_EXISTED : 유저가 이미 존재

        ■ errCode with 500
        INTERNAL_SERVER : 내부 로직 처리 실패
        INTERNAL_DB : DB 처리 실패
        PLAYER_STATE_CHANGE_FAILED : 플레이어 상태 변경 실패
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResEmptyImageFood'
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: 음식 이미지 없는 음식 정보 가져오기
      tags:
      - food
  /v0.1/foods/history:
    get:
      description: |-
        ■ errCode with 400
        PARAM_BAD : 파라미터 오류
        USER_NOT_EXIST : 유저가 존재하지 않음
        USER_ALREADY_EXISTED : 유저가 이미 존재

        ■ errCode with 500
        INTERNAL_SERVER : 내부 로직 처리 실패
        INTERNAL_DB : DB 처리 실패
        PLAYER_STATE_CHANGE_FAILED : 플레이어 상태 변경 실패
      parameters:
      - description: accessToken
        in: header
        name: tkn
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResHistoryFood'
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: 음식 히스토리 가쟈오기
      tags:
      - food
  /v0.1/foods/image:
    post:
      description: |-
        ■ errCode with 400
        PARAM_BAD : 파라미터 오류
        USER_NOT_EXIST : 유저가 존재하지 않음
        USER_ALREADY_EXISTED : 유저가 이미 존재

        ■ errCode with 500
        INTERNAL_SERVER : 내부 로직 처리 실패
        INTERNAL_DB : DB 처리 실패
        PLAYER_STATE_CHANGE_FAILED : 플레이어 상태 변경 실패
      parameters:
      - description: food ID
        in: formData
        name: foodID
        type: string
      - description: 음식 이미지 파일
        in: formData
        name: image
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: boolean
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: 음식 이미지 업로드하기
      tags:
      - food
  /v0.1/foods/meta:
    get:
      description: |-
        ■ errCode with 400
        PARAM_BAD : 파라미터 오류
        USER_NOT_EXIST : 유저가 존재하지 않음
        USER_ALREADY_EXISTED : 유저가 이미 존재

        ■ errCode with 500
        INTERNAL_SERVER : 내부 로직 처리 실패
        INTERNAL_DB : DB 처리 실패
        PLAYER_STATE_CHANGE_FAILED : 플레이어 상태 변경 실패
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResMetaData'
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: 메타 데이터 가져오기
      tags:
      - food
  /v0.1/foods/rank:
    get:
      description: |-
        ■ errCode with 400
        PARAM_BAD : 파라미터 오류
        USER_NOT_EXIST : 유저가 존재하지 않음
        USER_ALREADY_EXISTED : 유저가 이미 존재

        ■ errCode with 500
        INTERNAL_SERVER : 내부 로직 처리 실패
        INTERNAL_DB : DB 처리 실패
        PLAYER_STATE_CHANGE_FAILED : 플레이어 상태 변경 실패
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResRankingFood'
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: 실시간 음식 랭킹 가져오기 (TOP 10)
      tags:
      - food
  /v0.1/foods/recommend:
    post:
      description: |-
        ■ errCode with 400
        PARAM_BAD : 파라미터 오류
        USER_NOT_EXIST : 유저가 존재하지 않음
        USER_ALREADY_EXISTED : 유저가 이미 존재

        ■ errCode with 500
        INTERNAL_SERVER : 내부 로직 처리 실패
        INTERNAL_DB : DB 처리 실패
        PLAYER_STATE_CHANGE_FAILED : 플레이어 상태 변경 실패
      parameters:
      - description: accessToken
        in: header
        name: tkn
        required: true
        type: string
      - description: type
        in: body
        name: type
        required: true
        schema:
          $ref: '#/definitions/request.ReqRecommendFood'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResRecommendFood'
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: 음식 추천 받기
      tags:
      - food
  /v0.1/foods/select:
    post:
      description: |-
        ■ errCode with 400
        PARAM_BAD : 파라미터 오류
        USER_NOT_EXIST : 유저가 존재하지 않음
        USER_ALREADY_EXISTED : 유저가 이미 존재

        ■ errCode with 500
        INTERNAL_SERVER : 내부 로직 처리 실패
        INTERNAL_DB : DB 처리 실패
        PLAYER_STATE_CHANGE_FAILED : 플레이어 상태 변경 실패
      parameters:
      - description: accessToken
        in: header
        name: tkn
        required: true
        type: string
      - description: type
        in: body
        name: type
        required: true
        schema:
          $ref: '#/definitions/request.ReqSelectFood'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResSelectFood'
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: 음식 선택하기
      tags:
      - food
  /v0.1/user/{userID}:
    get:
      description: |-
        ■ errCode with 400
        PARAM_BAD : 파라미터 오류
        USER_NOT_EXIST : 유저가 존재하지 않음
        USER_ALREADY_EXISTED : 유저가 이미 존재

        ■ errCode with 500
        INTERNAL_SERVER : 내부 로직 처리 실패
        INTERNAL_DB : DB 처리 실패
        PLAYER_STATE_CHANGE_FAILED : 플레이어 상태 변경 실패
      parameters:
      - description: accessToken
        in: header
        name: tkn
        required: true
        type: string
      - description: userID
        in: path
        name: userID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResGetUser'
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: 유저 프로필 가져오기
      tags:
      - user
  /v0.1/users/profile:
    put:
      description: |-
        ■ errCode with 400
        PARAM_BAD : 파라미터 오류
        USER_NOT_EXIST : 유저가 존재하지 않음
        USER_ALREADY_EXISTED : 유저가 이미 존재

        ■ errCode with 500
        INTERNAL_SERVER : 내부 로직 처리 실패
        INTERNAL_DB : DB 처리 실패
        PLAYER_STATE_CHANGE_FAILED : 플레이어 상태 변경 실패
      parameters:
      - description: accessToken
        in: header
        name: tkn
        required: true
        type: string
      - description: 모든 데이터 전달 요청(수정하는 데이터만 보내면 에러 발생)
        in: body
        name: json
        required: true
        schema:
          $ref: '#/definitions/request.ReqUpdateUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: boolean
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: 유저 프로필 저장하기
      tags:
      - user
  /v0.2/auth/google:
    post:
      description: |-
        ■ errCode with 400
        PARAM_BAD : 파라미터 오류
        USER_NOT_EXIST : 유저가 존재하지 않음
        USER_ALREADY_EXISTED : 유저가 이미 존재

        ■ errCode with 500
        INTERNAL_SERVER : 내부 로직 처리 실패
        INTERNAL_DB : DB 처리 실패
      parameters:
      - description: 구글 토큰
        in: body
        name: json
        required: true
        schema:
          $ref: '#/definitions/request.ReqV02GoogleOauth'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResV02GoogleOauth'
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: '[app] google oauth 로그인'
      tags:
      - auth
  /v0.2/auth/google/callback:
    get:
      description: |-
        ■ errCode with 400
        PARAM_BAD : 파라미터 오류
        USER_NOT_EXIST : 유저가 존재하지 않음
        USER_ALREADY_EXISTED : 유저가 이미 존재

        ■ errCode with 500
        INTERNAL_SERVER : 내부 로직 처리 실패
        INTERNAL_DB : DB 처리 실패
      parameters:
      - description: code
        in: query
        name: code
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.ResV02GoogleOauthCallback'
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: google oauth 로그인 콜백
      tags:
      - auth
swagger: "2.0"
